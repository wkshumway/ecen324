Computer Systems – Terms
* Chapter 3
* Pg. 164                    
** Machine code
   Computers execute machine code, sequences of bytes encoding the low-level operations
that manipulate data, manage memory, read and write data on storage
devices, and communicate over networks
Our presentation is based on two related machine languages: Intel IA32, the
dominant language of most computers today, and x86-64,
** Assembler
   A compiler generates machine code
through a series of stages, based on the rules of the programming language, the
instruction set of the target machine, and the conventions followed by the operating
system. The gcc C compiler generates its output in the form of assembly code,
a textual representation of the machine code giving the individual instructions in
the program. gcc then invokes both an assembler and a linker to generate the executable
machine code from the assembly code.
** Linker ^
* 3.1 A Historical Perspective
** Hyperthreading
Pentium 4E: (2004, 125Mtransistors). Added hyperthreading, a method to run
two programs simultaneously on a single processor
** Multi-core
Core 2: (2006, 291Mtransistors). Returned back to a microarchitecture similar
to P6. First multi-core Intel microprocessor, where multiple processors are
implemented on a single chip. Did not support hyperthreading.
** Moore’s Law (Aside)

   If we plot the number of transistors in the different Intel processors versus the year of introduction, and
use a logarithmic scale for the y-axis, we can see that the growth has been phenomenal. Fitting a line
through the data, we see that the number of transistors increases at an annual rate of approximately
38%, meaning that the number of transistors doubles about every 26 months. This growth has been
sustained over the multiple-decade history of x86 microprocessors.
In 1965, Gordon Moore, a founder of Intel Corporation, extrapolated from the chip technology
of the day, in which they could fabricate circuits with around 64 transistors on a single chip, to predict
that the number of transistors per chip would double every year for the next 10 years. This predication
became known as Moore’s law. As it turns out, his prediction was just a little bit optimistic, but also too
short-sighted. Over more than 45 years, the semiconductor industry has been able to double transistor
counts on average every 18 months.
Similar exponential growth rates have occurred for other aspects of computer technology—disk
capacities, memory-chip capacities, and processor performance. These remarkable growth rates have
been the major driving forces of the computer revolution.
* 3.2 Program Encodings
** Preprocessor
   the C preprocessor expands the source code to
include any files specified with #include commands and to expand any macros,
specified with #define declarations.
** Compiler
   the compiler generates assemblycode
versions of the two source files having names p1.s and p2.s.
** Assembler
Next, the
assembler converts the assembly code into binary object-code files p1.o and p2.o.
** Object code
  Object code is one form of machine code—it contains binary representations of all
of the instructions, but the addresses of global values are not yet filled in
** Linker
   the linker merges these two object-code files along with code implementing library
functions (e.g., printf) and generates the final executable code file p.j
   
* 3.2.1 Machine-Level Code
** Instruction set architecture (ISA)
   First, the format and behavior of a machine-level program is defined
by the instruction set architecture, or “ISA,” defining the processor state,
the format of the instructions, and the effect each of these instructions will have
on the state. Most ISAs, including IA32 and x86-64, describe the behavior of
a program as if each instruction is executed in sequence, with one instruction
completing before the next one begins. The processor hardware is far more elaborate,
executing many instructions concurrently, but they employ safeguards to
ensure that the overall behavior matches the sequential operation dictated by the
ISA
** Program counter
   The program counter (commonly referred to as the “PC,” and called %eip in
IA32) indicates the address in memory of the next instruction to be executed.
** Register file
The integer register file contains eight named locations storing 32-bit values.
These registers can hold addresses (corresponding to C pointers) or integer
data. Some registers are used to keep track of critical parts of the program
state, while others are used to hold temporary data, such as the local variables
of a procedure, and the value to be returned by a function.
* 3.2.2 Code Examples
** Disassemblers
   To inspect the contents of machine-code files, a class of programs known as
disassemblers can be invaluable. These programs generate a format similar to
assembly code from the machine code.With Linux systems, the program objdump
(for “object dump”) can serve this role given the ‘-d’ command-line flag:
unix> objdump -d code.o
* 3.2.3 Notes on Formatting
** Assembly-code formats (aside)
   In our presentation, we show assembly code inATT (named after “AT&T,” the company that operated
Bell Laboratories for many years) format, the default format for gcc, objdump, and the other tools we
will consider. Other programming tools, including those from Microsoft as well as the documentation
from Intel, show assembly code in Intel format. The two formats differ in a number of ways. As an
example, gcc can generate code in Intel format for the sum function using the following command line:
unix> gcc -O1 -S -masm=intel code.c
This gives the following assembly code:
Assembly code for simple in Intel format
1 simple:
2 push ebp
3 mov ebp, esp
4 mov edx, DWORD PTR [ebp+8]
5 mov eax, DWORD PTR [ebp+12]
6 add eax, DWORD PTR [edx]
7 mov DWORD PTR [edx], eax
8 pop ebp
9 ret
We see that the Intel and ATT formats differ in the following ways:
. The Intel code omits the size designation suffixes.We see instruction mov instead of movl.
. The Intel code omits the ‘%’ character in front of register names, using esp instead of %esp.
. The Intel code has a different way of describing locations in memory, for example ‘DWORD PTR
[ebp+8]’ rather than ‘8(%ebp)’.
. Instructions with multiple operands list them in the reverse order. This can be very confusing when
switching between the two formats.
Although we will not be using Intel format in our presentation, you will encounter it in IA32 documentation
from Intel andWindows documentation from Microsoft.
* 3.4 Accessing Information
** General-purpose registers
   
3.4.1 Operand Specifiers
 Immediate
 Register
 Memory reference
Effective address
Addressing modes
3.4.2 Data Movement Instructions
Instruction classes
Destination register (aside)
Comparing byte movement (aside)
3.4.4 Pushing and Popping Stack
Data
Push operation
Pop operation
Top of the stack
3.5 Arithmetic and Logical
Operations
Binary
Unary
3.5.1 Load Effective Address
Load effective address
3.5.5 Special Arithmetic
Operations
Oct word
3.6 Control
Straight-line code
Jump
3.6.1 Condition Codes
Condition codes
3.6.3 Jump Instructions
Jump
Label
Jump targets
Direct jump
Indirect jump
Conditional
3.6.4 Jump Instruction Encoding
Rep/repz (aside)
3.6.5 Implementing Conditional
Branches with Conditional Control
Test-expr
3.6.6 Implementing Conditional
Branches with Conditional Moves
Data (transfer of)
Conditional move
Branch prediction logic
Then-expr
Else-expr
3.6.7 Loops
Body-statement
Reverse engineering loops (aside)
Jump to middle
Guarded do
Init-expr
Test-expr
Update-expr
3.6.8 Switch Statements
Jump table
Fall through
Unsigned
Computed goto
3.7 Procedures
Passing control
Passing data
Allocating and dea
llocating memory
3.7.1 The Run-Time Stack
Stack frame
Return address
3.7.5 Local Storage in Register
Callee-saved
Caller-saved
3.8.3 Nested Arrays
Row major order
 Contiguous (successive) locations
3.9 Heterogeneous Data
Structures
Structures
3.9.2 Unions
Union
3.9.3 Data Alignment
Alignment restrictions
Mandatory alignment
3.10.1 Understanding Pointers
Every pointer has an associated type
Pointers are created with the &
operator
Dereference (*)
Pointers value
Arrays and pointers
Casting type doesn’t change value
Pointers point to function
3.10.3 Out-of-Bounds Memory
References and Buffer Overflow
Buffer overflow 
Exploit code
3.10.4 Thwarting Buffer Overflow
Attacks
Worms and viruses (aside)
Stack randomization
Address-space layout randomization
Stack protector
Canary value / Guard value
Segmented addressing
Memory protection
3.10.5 Supportin
g Variable-Size
Stack Frames
Base pointer

